{"version":3,"sources":["logo.svg","UserInput/UserInput.js","UserOutput/UserOutput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","userInput","props","style","textAlign","display","padding","margin","border","backgroundColor","type","value","Uinput","onChange","Changed","width","height","userOutput","today","Date","date","getFullYear","getMonth","getDate","Output","onClick","click","font","cursor","App","state","input","entries","taskdata","showUserList","onChangeHandler","event","setState","target","onChangeSubmit","tempList","push","dataInfo","console","log","length","deleteTaskHandler","index","listTask","splice","RenderContentLst","this","map","task","Keyid","shortid","generate","UserOutput","key","className","UserInput","Title","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,oJC2D5BC,G,uBAvDI,SAAEC,GA4BjB,OACA,yBAAKC,MALe,CAChBC,UAAW,WAMX,8BACA,yBAAKD,MA9BK,CAEVE,QAAS,eACTC,QAAS,OACTF,UAAW,OACVG,OAAQ,OACRC,OAAQ,kBACRC,gBAAiB,SAwBf,6BACC,mDACA,iCAKA,6BAGI,8BAAWC,KAAM,OAAOC,MAAST,EAAMU,OAAQC,SAAYX,EAAMY,QAASX,MA7BvE,CAEXE,QAAS,eACRI,gBAAiB,SACjBM,MAAO,QACRC,OAAQ,iB,gBC0CDC,EA/DK,SAACf,GAGjB,IAAMgB,EAAQ,IAAIC,KAEZC,EAAOF,EAAMG,cAAc,KAAKH,EAAMI,WAAW,GAAG,IAAIJ,EAAMK,UAqCpE,OAEI,yBAAKpB,MArCM,CAEXE,QAAS,eACTC,QAAS,MACTF,UAAW,OACVG,OAAQ,OACRC,OAAQ,kBACRC,gBAAiB,SA+BlB,8CACA,2BAAIW,GACJ,yBAAKjB,MA5BM,CAEXE,QAAS,eACTC,QAAS,OACTF,UAAW,OACVG,OAAQ,OACRC,OAAQ,kBACRC,gBAAiB,WAwBd,6BACA,8BAAUE,MAAST,EAAMsB,OAAQrB,MAnB1B,CAEXE,QAAS,eACRI,gBAAiB,SACjBM,MAAO,QACRC,OAAQ,YAkBR,4BAAQS,QAASvB,EAAMwB,OAAvB,gBCjDFvB,EAAQ,CAEZM,gBAAiB,QACjBkB,KAAM,UACNnB,OAAQ,iBACRF,QAAS,MACTsB,OAAQ,WAiHKC,E,2MA3GbC,MAAQ,CAGNC,MAAM,GACNC,QAAQ,EAERC,SAAU,GACVC,cAAe,G,EAIjBC,gBAAkB,SAACC,GAEjB,EAAKC,SAAS,CAACN,MAAOK,EAAME,OAAO3B,S,EAIrC4B,eAAiB,SAACH,GAEhB,EAAKN,MAAME,SAAW,EACtB,IAAIQ,EAAY,EAAKV,MAAMG,SAQ3B,GALAO,EAASC,KAAK,CAACC,SAAS,EAAKZ,MAAMC,QACnC,EAAKM,SAAS,CAACJ,SAAWO,IAG1BG,QAAQC,IAAI,EAAKd,MAAMG,UACW,IAA/B,EAAKH,MAAMG,SAASY,OACvB,CAEE,EAAKR,SAAS,CAACH,cADP,IAERS,QAAQC,IAAI,YAEV,CAGF,EAAKP,SAAS,CAACH,cADP,IAERS,QAAQC,IAAI,W,EAGhBE,kBAAoB,SAACC,GAEnB,IAAMC,EAAQ,YAAO,EAAKlB,MAAMG,UAGhC,GAFAe,EAASC,OAAOF,EAAO,GACvB,EAAKV,SAAS,CAACJ,SAAUe,IACS,IAA/B,EAAKlB,MAAMG,SAASY,OACvB,CAEE,EAAKR,SAAS,CAACH,cADP,IAERS,QAAQC,IAAI,YAEV,CAGF,EAAKP,SAAS,CAACH,cADP,IAERS,QAAQC,IAAI,W,wEAIjB,IAAD,OAEMM,EAAmB,KAwBvB,OAtBGC,KAAKrB,MAAMI,eAIZgB,EACE,6BACGC,KAAKrB,MAAMG,SAASmB,KAAI,SAACC,EAAMN,GAC9B,IAAIO,EAAQC,IAAQC,WAEpB,OADAb,QAAQC,IAAIS,EAAKX,UAGf,kBAACe,EAAD,CACA/B,MAAO,kBAAM,EAAKoB,kBAAkBC,IACpCvB,OAAQ6B,EAAKX,SACbgB,IAAKJ,SAUf,yBAAKK,UAAY,OACf,6BACF,kBAACC,EAAD,CAAWC,MAASV,KAAKrB,MAAMgC,MAAOlD,OAAUuC,KAAKrB,MAAMC,MACzDjB,QAAUqC,KAAKhB,kBACb,4BAAQhC,MAASA,EAAMsB,QAAW0B,KAAKZ,gBAAvC,iBAEH,yBAAKoB,UAAY,YACfT,Q,GAhGaa,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.3554db27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport EditorJs from 'react-editor-js';\r\nimport CheckList from '@editorjs/checklist';\r\n\r\nconst  userInput = ( props) =>\r\n{\r\n    const style = {\r\n\r\n        display: 'inline-table', \r\n        padding: '16px', \r\n        textAlign: 'left',\r\n         margin: '10px',    \r\n         border: '1px solid black',\r\n         backgroundColor: 'grey',\r\n    \r\n         \r\n\r\n    };\r\n    const style1 = {\r\n\r\n        display: 'inline-table', \r\n         backgroundColor: 'yellow',\r\n         width: '220px',\r\n        height: '200px'\r\n        \r\n         \r\n\r\n    };\r\n    const styleCenter = {\r\n        textAlign: 'center'\r\n    }\r\n    \r\n    return(\r\n    <div style = {styleCenter}>\r\n        \r\n        <form>\r\n        <div style = {style}>\r\n           <div>\r\n            <h2>ToDo List Generator</h2>\r\n            <label>\r\n          \r\n               \r\n            </label>\r\n            </div>\r\n            <div>\r\n            \r\n         \r\n                <textarea  type =\"text\" value = {props.Uinput} onChange = {props.Changed} style = {style1}/>\r\n\r\n            \r\n            </div>\r\n           \r\n        \r\n        </div>\r\n        </form>\r\n    </div>)\r\n\r\n};\r\n\r\nexport default userInput;\r\n","import React from 'react';\r\n\r\nconst  userOutput = (props) =>\r\n{\r\n\r\n    const today = new Date();\r\n\r\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n\r\n    const style1 = {\r\n\r\n        display: 'inline-table', \r\n        padding: '15x', \r\n        textAlign: 'left',\r\n         margin: '10px',    \r\n         border: '1px solid black',\r\n         backgroundColor: 'grey',\r\n    \r\n         \r\n\r\n    };\r\n    const style2 = {\r\n\r\n        display: 'inline-table', \r\n        padding: '16px', \r\n        textAlign: 'left',\r\n         margin: '10px',    \r\n         border: '1px solid black',\r\n         backgroundColor: 'yellow',\r\n    \r\n         \r\n\r\n    };\r\n\r\n    const style3 = {\r\n\r\n        display: 'inline-table', \r\n         backgroundColor: 'yellow',\r\n         width: '220px',\r\n        height: '200px'\r\n         \r\n\r\n    };\r\n\r\n    return(\r\n\r\n        <div style ={style1}> \r\n        <p>task created on</p> \r\n        <p>{date}</p>\r\n        <div style = {style2}>\r\n          \r\n            \r\n            <div>\r\n            <textarea value = {props.Output} style = {style3}/> \r\n            </div>\r\n           \r\n        \r\n        <button onClick={props.click} > End Task</button>\r\n        \r\n        </div>\r\n        \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default userOutput;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport UserInput from './UserInput/UserInput'\r\nimport EditorJs from 'react-editor-js';\r\nimport shortid from 'shortid';\r\nimport UserOutput from './UserOutput/UserOutput';\r\n//push me zsdasd\r\nconst style = {\r\n\r\n  backgroundColor: 'white',\r\n  font: 'inherit',\r\n  border: '1px solid blue',\r\n  padding: '8px',\r\n  cursor: 'pointer'\r\n\r\n   \r\n\r\n};\r\nclass App extends Component{\r\n  state = {\r\n    \r\n  \r\n    input:'', \r\n    entries:0, \r\n  \r\n    taskdata: [],\r\n    showUserList : false\r\n  }\r\n \r\n\r\n  onChangeHandler = (event) =>\r\n  {\r\n    this.setState({input: event.target.value});\r\n   \r\n  }\r\n \r\n  onChangeSubmit = (event) =>\r\n  {\r\n    this.state.entries += 1;\r\n    let tempList =  this.state.taskdata;\r\n\r\n    \r\n    tempList.push({dataInfo:this.state.input})\r\n    this.setState({taskdata : tempList})\r\n    //this.setState({title: event.target.value});\r\n    //this.setState({input: event.target.value});\r\n    console.log(this.state.taskdata)\r\n    if(this.state.taskdata.length !== 0)\r\n    {\r\n      let T = true; \r\n      this.setState({showUserList : T});\r\n      console.log(\"true\");\r\n    }\r\n    else{\r\n  \r\n      let F = false; \r\n      this.setState({showUserList: F});\r\n      console.log(\"false\");\r\n    }\r\n  }\r\n  deleteTaskHandler = (index) => {\r\n   \r\n    const listTask = [...this.state.taskdata];\r\n    listTask.splice(index, 1);\r\n    this.setState({taskdata: listTask });\r\n    if(this.state.taskdata.length !== 0)\r\n    {\r\n      let T = true; \r\n      this.setState({showUserList : T});\r\n      console.log(\"true\");\r\n    }\r\n    else{\r\n  \r\n      let F = false; \r\n      this.setState({showUserList: F});\r\n      console.log(\"false\");\r\n    }\r\n  }\r\nrender() \r\n{\r\n\r\n  let RenderContentLst = null;\r\n  let idNumber = 0; \r\n  if(this.state.showUserList)\r\n  {\r\n\r\n\r\n    RenderContentLst = (\r\n      <div>\r\n        {this.state.taskdata.map((task, index) => {\r\n          let Keyid = shortid.generate();\r\n          console.log(task.dataInfo)\r\n          return (\r\n            \r\n            <UserOutput\r\n            click={() => this.deleteTaskHandler(index)}\r\n            Output={task.dataInfo}\r\n            key={Keyid}\r\n           />\r\n        \r\n        )})}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n  \r\n  <div className = \"App\">\r\n    <div >\r\n  <UserInput Title = {this.state.title} Uinput = {this.state.input} \r\n    Changed ={this.onChangeHandler} />\r\n      <button style = {style}onClick = {this.onChangeSubmit}>Submit task!</button>\r\n   </div>\r\n   <div className = \"Flex-row\">\r\n    {RenderContentLst}\r\n\r\n   </div>\r\n\r\n\r\n  </div>\r\n\r\n  \r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}